openapi: 3.0.3
info:
title: ERP+BI Hybrid â€” Core APIs
version: 1.0.0
servers:

* url: [https://api.demo.example.com](https://api.demo.example.com)
  tags:
* name: orders
* name: inventory
* name: billing
  components:
  securitySchemes:
  bearerAuth:
  type: http
  scheme: bearer
  bearerFormat: JWT
  schemas:
  Error:
  type: object
  properties:
  code:
  type: string
  message:
  type: string
  OrderItem:
  type: object
  required: [sku, qty, price]
  properties:
  sku:
  type: string
  qty:
  type: integer
  minimum: 1
  price:
  type: number
  format: float
  Order:
  type: object
  required: [id, customer_id, items, total_amount, status, created_at]
  properties:
  id:
  type: string
  format: uuid
  customer_id:
  type: string
  items:
  type: array
  items:
  $ref: '#/components/schemas/OrderItem'
  total_amount:
  type: number
  status:
  type: string
  enum: [draft, placed, cancelled, shipped, completed]
  created_at:
  type: string
  format: date-time
  InventoryItem:
  type: object
  required: [sku, name, qty_on_hand]
  properties:
  sku: { type: string }
  name: { type: string }
  description: { type: string }
  qty_on_hand: { type: integer }
  reorder_point: { type: integer }
  Invoice:
  type: object
  required: [id, order_id, amount, status, issued_at]
  properties:
  id: { type: string, format: uuid }
  order_id: { type: string }
  amount: { type: number }
  status: { type: string, enum: [issued, paid, overdue] }
  issued_at: { type: string, format: date-time }

security:

* bearerAuth: []

paths:
/orders:
post:
tags: [orders]
summary: Create a new order
requestBody:
required: true
content:
application/json:
schema:
type: object
required: [customer_id, items]
properties:
customer_id: { type: string }
items:
type: array
items:
$ref: '#/components/schemas/OrderItem'
responses:
'201':
description: Created
content:
application/json:
schema:
$ref: '#/components/schemas/Order'
'400':
description: Bad request
content:
application/json:
schema:
$ref: '#/components/schemas/Error'

/orders/{order_id}:
get:
tags: [orders]
summary: Get order by ID
parameters:
- name: order_id
in: path
required: true
schema: { type: string }
responses:
'200':
description: OK
content:
application/json:
schema:
$ref: '#/components/schemas/Order'
patch:
tags: [orders]
summary: Update order status or items
parameters:
- name: order_id
in: path
required: true
schema: { type: string }
requestBody:
required: true
content:
application/json:
schema:
type: object
properties:
status: { type: string, enum: [draft, placed, cancelled, shipped, completed] }
responses:
'200':
description: Updated
content:
application/json:
schema:
$ref: '#/components/schemas/Order'

/inventory:
get:
tags: [inventory]
summary: List inventory items
responses:
'200':
description: OK
content:
application/json:
schema:
type: array
items:
$ref: '#/components/schemas/InventoryItem'
post:
tags: [inventory]
summary: Create / update inventory item
requestBody:
required: true
content:
application/json:
schema:
$ref: '#/components/schemas/InventoryItem'
responses:
'201':
description: Created/Updated
content:
application/json:
schema:
$ref: '#/components/schemas/InventoryItem'

/inventory/{sku}/reserve:
post:
tags: [inventory]
summary: Reserve quantity for an order
parameters:
- name: sku
in: path
required: true
schema: { type: string }
requestBody:
required: true
content:
application/json:
schema:
type: object
required: [order_id, qty]
properties:
order_id: { type: string }
qty: { type: integer, minimum: 1 }
responses:
'200':
description: Reserved
content:
application/json:
schema:
type: object
properties:
sku: { type: string }
reserved_qty: { type: integer }
'409':
description: Insufficient stock
content:
application/json:
schema: $ref: '#/components/schemas/Error'

/billing/invoices:
post:
tags: [billing]
summary: Create invoice for an order
requestBody:
required: true
content:
application/json:
schema:
type: object
required: [order_id, amount]
properties:
order_id: { type: string }
amount: { type: number }
responses:
'201':
description: Invoice created
content:
application/json:
schema:
$ref: '#/components/schemas/Invoice'

/billing/invoices/{invoice_id}/pay:
post:
tags: [billing]
summary: Mark invoice as paid
parameters:
- name: invoice_id
in: path
required: true
schema: { type: string }
responses:
'200':
description: Paid
content:
application/json:
schema:
$ref: '#/components/schemas/Invoice'
/events/publish:
post:
summary: Publish a raw domain event (for testing)
requestBody:
required: true
content:
application/json:
schema:
type: object
properties:
topic: { type: string }
payload: { type: object }
responses:
'202':
description: Accepted

components_example_note: |
Implementation notes:

* Every state-changing endpoint MUST write to Postgres and then publish an event to NATS.
* Events schema example: { "type": "invoice_created", "source": "billing", "payload": { ... }, "timestamp": "2025-10-04T12:34:56Z" }.
* All services must expose `/healthz` and `/metrics`.
